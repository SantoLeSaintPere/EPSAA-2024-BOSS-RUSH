//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/INPUTS/GameInputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""435e74c9-d49b-46d0-8fd2-1641d586cf32"",
            ""actions"": [
                {
                    ""name"": ""MOVE"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b2c543fb-f881-45ab-a63d-f86cc343987f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ROTATEY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f057eb83-db4d-4d23-a0e9-69986b698539"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AIM"",
                    ""type"": ""Button"",
                    ""id"": ""7966c35d-624e-4a97-966a-a27e08fe6a3a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SHOOT"",
                    ""type"": ""Button"",
                    ""id"": ""8aa4c002-e12f-4842-9383-775e3b1b6729"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ATTACK"",
                    ""type"": ""Button"",
                    ""id"": ""a7378be7-ab54-45f2-96b3-91aa37355d6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f2eb3d52-8b76-4a14-8ab5-9a706a10ec27"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0386ef75-cac7-48f4-b529-45e7ed8d7525"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MOUSE&KEYBOARD"",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a3093d47-4364-4c95-aa4d-e2e708d161a7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MOUSE&KEYBOARD"",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""949e35ed-6fe5-4668-bb64-d2ce39c241cf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MOUSE&KEYBOARD"",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a9add522-f5ac-4649-8bd1-25dbfc9659c9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MOUSE&KEYBOARD"",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0b6fb4c6-c38e-4bd8-aec1-6aed448a1f9e"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MOUSE&KEYBOARD"",
                    ""action"": ""ROTATEY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e71185a-ad39-4281-b8ad-765966156243"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MOUSE&KEYBOARD"",
                    ""action"": ""AIM"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd4a1251-5e60-410c-bb00-4a0faef108a6"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MOUSE&KEYBOARD"",
                    ""action"": ""SHOOT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9fee091c-75bf-4442-bf8d-ee310a8481dd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MOUSE&KEYBOARD"",
                    ""action"": ""ATTACK"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MENU"",
            ""id"": ""daae5335-3aed-438b-b82b-ea34803a8633"",
            ""actions"": [
                {
                    ""name"": ""PASS"",
                    ""type"": ""Button"",
                    ""id"": ""8bf3a1fd-5bcc-4ed6-86b4-8fc30867f5d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3fdd20e9-ba79-4f44-aa77-d7c12751717d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PASS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MOUSE&KEYBOARD"",
            ""bindingGroup"": ""MOUSE&KEYBOARD"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_MOVE = m_Player.FindAction("MOVE", throwIfNotFound: true);
        m_Player_ROTATEY = m_Player.FindAction("ROTATEY", throwIfNotFound: true);
        m_Player_AIM = m_Player.FindAction("AIM", throwIfNotFound: true);
        m_Player_SHOOT = m_Player.FindAction("SHOOT", throwIfNotFound: true);
        m_Player_ATTACK = m_Player.FindAction("ATTACK", throwIfNotFound: true);
        // MENU
        m_MENU = asset.FindActionMap("MENU", throwIfNotFound: true);
        m_MENU_PASS = m_MENU.FindAction("PASS", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_MOVE;
    private readonly InputAction m_Player_ROTATEY;
    private readonly InputAction m_Player_AIM;
    private readonly InputAction m_Player_SHOOT;
    private readonly InputAction m_Player_ATTACK;
    public struct PlayerActions
    {
        private @GameInputControls m_Wrapper;
        public PlayerActions(@GameInputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MOVE => m_Wrapper.m_Player_MOVE;
        public InputAction @ROTATEY => m_Wrapper.m_Player_ROTATEY;
        public InputAction @AIM => m_Wrapper.m_Player_AIM;
        public InputAction @SHOOT => m_Wrapper.m_Player_SHOOT;
        public InputAction @ATTACK => m_Wrapper.m_Player_ATTACK;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @MOVE.started += instance.OnMOVE;
            @MOVE.performed += instance.OnMOVE;
            @MOVE.canceled += instance.OnMOVE;
            @ROTATEY.started += instance.OnROTATEY;
            @ROTATEY.performed += instance.OnROTATEY;
            @ROTATEY.canceled += instance.OnROTATEY;
            @AIM.started += instance.OnAIM;
            @AIM.performed += instance.OnAIM;
            @AIM.canceled += instance.OnAIM;
            @SHOOT.started += instance.OnSHOOT;
            @SHOOT.performed += instance.OnSHOOT;
            @SHOOT.canceled += instance.OnSHOOT;
            @ATTACK.started += instance.OnATTACK;
            @ATTACK.performed += instance.OnATTACK;
            @ATTACK.canceled += instance.OnATTACK;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @MOVE.started -= instance.OnMOVE;
            @MOVE.performed -= instance.OnMOVE;
            @MOVE.canceled -= instance.OnMOVE;
            @ROTATEY.started -= instance.OnROTATEY;
            @ROTATEY.performed -= instance.OnROTATEY;
            @ROTATEY.canceled -= instance.OnROTATEY;
            @AIM.started -= instance.OnAIM;
            @AIM.performed -= instance.OnAIM;
            @AIM.canceled -= instance.OnAIM;
            @SHOOT.started -= instance.OnSHOOT;
            @SHOOT.performed -= instance.OnSHOOT;
            @SHOOT.canceled -= instance.OnSHOOT;
            @ATTACK.started -= instance.OnATTACK;
            @ATTACK.performed -= instance.OnATTACK;
            @ATTACK.canceled -= instance.OnATTACK;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // MENU
    private readonly InputActionMap m_MENU;
    private List<IMENUActions> m_MENUActionsCallbackInterfaces = new List<IMENUActions>();
    private readonly InputAction m_MENU_PASS;
    public struct MENUActions
    {
        private @GameInputControls m_Wrapper;
        public MENUActions(@GameInputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PASS => m_Wrapper.m_MENU_PASS;
        public InputActionMap Get() { return m_Wrapper.m_MENU; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MENUActions set) { return set.Get(); }
        public void AddCallbacks(IMENUActions instance)
        {
            if (instance == null || m_Wrapper.m_MENUActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MENUActionsCallbackInterfaces.Add(instance);
            @PASS.started += instance.OnPASS;
            @PASS.performed += instance.OnPASS;
            @PASS.canceled += instance.OnPASS;
        }

        private void UnregisterCallbacks(IMENUActions instance)
        {
            @PASS.started -= instance.OnPASS;
            @PASS.performed -= instance.OnPASS;
            @PASS.canceled -= instance.OnPASS;
        }

        public void RemoveCallbacks(IMENUActions instance)
        {
            if (m_Wrapper.m_MENUActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMENUActions instance)
        {
            foreach (var item in m_Wrapper.m_MENUActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MENUActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MENUActions @MENU => new MENUActions(this);
    private int m_MOUSEKEYBOARDSchemeIndex = -1;
    public InputControlScheme MOUSEKEYBOARDScheme
    {
        get
        {
            if (m_MOUSEKEYBOARDSchemeIndex == -1) m_MOUSEKEYBOARDSchemeIndex = asset.FindControlSchemeIndex("MOUSE&KEYBOARD");
            return asset.controlSchemes[m_MOUSEKEYBOARDSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMOVE(InputAction.CallbackContext context);
        void OnROTATEY(InputAction.CallbackContext context);
        void OnAIM(InputAction.CallbackContext context);
        void OnSHOOT(InputAction.CallbackContext context);
        void OnATTACK(InputAction.CallbackContext context);
    }
    public interface IMENUActions
    {
        void OnPASS(InputAction.CallbackContext context);
    }
}
